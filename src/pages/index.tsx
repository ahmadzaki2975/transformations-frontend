import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import { useEffect, useState } from "react";
import CoordinateForm from "../components/CoordinateForm";
import { CLIENT_RENEG_LIMIT } from "tls";

export default function Home() {
  const [n, setN]: any = useState(3);
  if (n < 2) setN(2); // minimum 2 sides (a line)
  if (n > 6) setN(6); // maximum 6 sides (a hexagon)

  const [tx, setTx] = useState(0);
  const [ty, setTy] = useState(0);
  const [angle, setAngle] = useState(0);
  const [sx, setSx] = useState(1);
  const [sy, setSy] = useState(1);
  const [shx, setShx] = useState(0);
  const [shy, setShy] = useState(0);
  const [imgLink, setImgLink] = useState("");
  const [serverConnected, setServerConnected] = useState(false);

  function handleSubmit() {
    const coordinates: any = [
      { x: localStorage.getItem("x0"), y: localStorage.getItem("y0") },
      { x: localStorage.getItem("x1"), y: localStorage.getItem("y1") },
      { x: localStorage.getItem("x2"), y: localStorage.getItem("y2") },
      { x: localStorage.getItem("x3"), y: localStorage.getItem("y3") },
      { x: localStorage.getItem("x4"), y: localStorage.getItem("y4") },
      { x: localStorage.getItem("x5"), y: localStorage.getItem("y5") },
    ];
    const requestOptions = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        n,
        coordinates,
        tx,
        ty,
        angle,
        sx,
        sy,
        shx,
        shy,
      }),
    };

    fetch("http://localhost:5000/transform", requestOptions)
      .then((response) => response.blob())
      .then((blob) => {
        const url = window.URL.createObjectURL(new Blob([blob]));
        setImgLink(url);
      })
      .catch((error) => {console.error(error); alert(error.message)});
  }

  useEffect(() => {
    setInterval(() => {
      fetch("http://localhost:5000/")
      .then((response) => setServerConnected(true))
      .catch((error) => setServerConnected(false));
    }, 3000)
  }, []);

  return (
    <>
      <Head>
        <title>2D Transformation Visualizer</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative bg-[#f8faeb] flex justify-center items-center w-full overflow-hidden">
        <div className="max-w-[425px] p-10 bg-[#f8faeb] flex flex-col gap-5 shadow-[0_0_10px_rgba(0,0,0,.4)]">
          <h1 className="text-center font-bold text-2xl">
            2D Transformations Visualizer
          </h1>
          <h1 className="text-center font-semibold text-xl">
            Teknik Visualisasi Grafis
          </h1>
          <h1 className="text-center">
            Ahmad Zaki Akmal <br /> 21/480179/TK/52981
          </h1>

          <div className="fixed bottom-[10px] right-[10px] flex flex-col justify-center items-center">
            <h1>Server Status: </h1>
            {serverConnected ? (
              <span className="text-green-500">Online</span>
            ) : (
              <span className="text-red-500">Offline</span>
            )}
          </div>

          <div className="flex flex-col bg-gradient-to-br from-yellow-400 to-yellow-500 p-5 rounded-xl">
            <label htmlFor="n">Polygon Sides (Max 6)</label>
            <input
              className="bg-transparent font-bold text-xl px-2"
              type="number"
              id="n"
              value={n}
              onChange={(e) => {
                setN(Number(e.target.value));
              }}
            />
          </div>

          <CoordinateForm n={n} />

          <div className="bg-gradient-to-br from-yellow-400 to-yellow-500 rounded-xl p-5">
            <h1 className="text-center text-xl font-bold">Transformations</h1>
            {/* //? Translation */}
            <div className="mt-5">
              <h1 className="font-bold text-center mb-2">Translation</h1>
              <div className="flex gap-1">
                <div className="flex flex-col">
                  <label className="text-center font-semibold">X Value</label>
                  <input
                    className="w-full text-center rounded-full"
                    type="number"
                    value={tx}
                    onChange={(e) => {
                      setTx(Number(e.target.value));
                    }}
                    step="0.1"
                  />
                </div>
                <div className="flex flex-col">
                  <label className="text-center font-semibold">Y Value</label>
                  <input
                    className="w-full text-center rounded-full"
                    type="number"
                    value={ty}
                    onChange={(e) => {
                      setTy(Number(e.target.value));
                    }}
                    step="0.1"
                  />
                </div>
              </div>
            </div>
            {/* //? Rotation */}
            <div className="mt-8">
              <h1 className="font-bold text-center mb-2">Rotation</h1>
              <div className="">
                <div className="flex flex-col">
                  <label className="text-center font-semibold">Angle</label>
                  <input
                    className="w-full text-center rounded-full"
                    type="number"
                    value={angle}
                    onChange={(e) => {
                      setAngle(Number(e.target.value));
                    }}
                    step="0.1"
                  />
                </div>
              </div>
            </div>
            {/* //? Scale */}
            <div className="mt-8">
              <h1 className="font-bold text-center mb-2">Scaling</h1>
              <div className="flex gap-1">
                <div className="flex flex-col">
                  <label className="text-center font-semibold">X Value</label>
                  <input
                    className="w-full text-center rounded-full"
                    type="number"
                    value={sx}
                    onChange={(e) => {
                      setSx(Number(e.target.value));
                    }}
                    step="0.1"
                  />
                </div>
                <div className="flex flex-col">
                  <label className="text-center font-semibold">Y Value</label>
                  <input
                    className="w-full text-center rounded-full"
                    type="number"
                    value={sy}
                    onChange={(e) => {
                      setSy(Number(e.target.value));
                    }}
                    step="0.1"
                  />
                </div>
              </div>
            </div>
            {/* //? Shearing */}
            <div className="mt-8">
              <h1 className="font-bold text-center mb-2">Shearing</h1>
              <div className="flex gap-1">
                <div className="flex flex-col">
                  <label className="text-center font-semibold">X Value</label>
                  <input
                    className="w-full text-center rounded-full"
                    type="number"
                    value={shx}
                    onChange={(e) => {
                      setShx(Number(e.target.value));
                    }}
                    step="0.1"
                  />
                </div>
                <div className="flex flex-col">
                  <label className="text-center font-semibold">Y Value</label>
                  <input
                    className="w-full text-center rounded-full"
                    type="number"
                    value={shy}
                    onChange={(e) => {
                      setShy(Number(e.target.value));
                    }}
                    step="0.1"
                  />
                </div>
              </div>
            </div>
          </div>

          <div
            className="bg-green-500 p-5 rounded-xl text-center hover:bg-green-600 transition duration-400 cursor-pointer"
            onClick={async () => handleSubmit()}
          >
            Submit
          </div>

          {/* //? Image Popup */}
          {imgLink ? (
            <div className="fixed top-0 left-0 w-screen h-screen bg-black/[.6] flex justify-center items-center">
              <div className="bg-white p-10">
                <Image
                  src={imgLink}
                  width={400}
                  height={400}
                  alt="Generated Image"
                  className="drop-shadow-xl"
                />
                <div
                  className="bg-green-500 px-5 py-2 mx-auto mt-5 rounded-xl text-center w-fit hover:bg-green-600 transition duration-400 cursor-pointer"
                  onClick={() => setImgLink("")}
                >
                  ok
                </div>
              </div>
            </div>
          ) : (
            ""
          )}

          <div className="flex flex-col justify-center items-center text-black mt-5">
            <a className="underline" href="https://github.com/ahmadzaki2975/transformations-frontend" target="_blank" rel="norel noopener">Frontend Repository</a>
            <a className="underline" href="https://github.com/ahmadzaki2975/transformations-backend" target="_blank" rel="norel noopener">Backend Repository</a>
          </div>
          <div className="flex flex-col justify-center items-center text-black mt-16">
            <h1>&copy; Ahmad Zaki Akmal, 2023</h1>
            {/* <h1>(I suck at UI design)</h1> */}
          </div>
        </div>
      </main>
    </>
  );
}
